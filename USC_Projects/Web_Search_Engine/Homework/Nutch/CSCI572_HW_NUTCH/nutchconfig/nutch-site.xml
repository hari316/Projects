<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>

<!-- Put site-specific property overrides in this file. -->

<configuration>
	
	<property>
	  <name>http.agent.name</name>
	  <value>TrojanCrawlers</value>
	</property>

<!-- HTTP properties -->

	<!-- CHANGED -->
	<property>
	  <name>http.robots.agents</name>
	  <value>TrojanCrawlers,*</value>
	  <description>The agent strings we'll look for in robots.txt files,
	  comma-separated, in decreasing order of precedence. You should
	  put the value of http.agent.name as the first agent name, and keep the
	  default * at the end of the list. E.g.: BlurflDev,Blurfl,*
	  </description>
	</property>

	<!-- CHANGED -->
	<property>
	  <name>http.agent.description</name>
	  <value>Crawler for CSCI 572 crawling FBI Vault</value>
	  <description>Further description of our bot- this text is used in
	  the User-Agent header.  It appears in parenthesis after the agent name.
	  </description>
	</property>

	<!-- CHANGED -->
	<property>
	  <name>http.timeout</name>
	  <value>300000</value>
	  <description>The default network timeout, in milliseconds.</description>
	</property>	

	<!-- CHANGED -->
	<property>
	  <name>http.content.limit</name>
	  <value>-1</value>
	  <description>The length limit for downloaded content using the http://
	  protocol, in bytes. If this value is nonnegative (>=0), content longer
	  than it will be truncated; otherwise, no truncation at all. Do not
	  confuse this setting with the file.content.limit setting.
	  </description>
	</property>
	
	<!-- CHANGED -->
	<property>
	  <name>http.verbose</name>
	  <value>true</value>
	  <description>If true, HTTP will log more verbosely.</description>
	</property>
	
	<!-- CHANGED -->
	<property>
	  <name>http.accept</name>
	  <value>text/html,application/pdf,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</value>
	  <description>Value of the "Accept" request header field.
	  </description>
	</property>


<!-- file properties -->

	<!-- CHANGED -->

	<property>
	  <name>file.content.limit</name>
	  <value>-1</value>
	  <description>The length limit for downloaded content using the file://
	  protocol, in bytes. If this value is nonnegative (>=0), content longer
	  than it will be truncated; otherwise, no truncation at all. Do not
	  confuse this setting with the http.content.limit setting.
	  </description>
	</property>
	
	<property>
	  <name>file.content.ignored</name>
	  <value>false</value>
	  <description>If true, no file content will be saved during fetch.
	  And it is probably what we want to set most of time, since file:// URLs
	  are meant to be local and we can always use them directly at parsing
	  and indexing stages. Otherwise file contents will be saved.
	  !! NO IMPLEMENTED YET !!
	  </description>
	</property>  
	
	<property>
	  <name>fetcher.threads.fetch</name>
	  <value>100</value>
	  <description>The number of FetcherThreads the fetcher should use.
	  This is also determines the maximum number of requests that are
	  made at once (each FetcherThread handles one connection). The total
	  number of threads running in distributed mode will be the number of
	  fetcher threads * number of nodes as fetcher has one map task per node.
	  </description>
	</property>
	
	<property>
         <name>http.timeout</name>
         <value>120000</value>
         <description></description>
	</property> 


<!-- FTP properties -->

	<property>
	  <name>ftp.content.limit</name>
	  <value>-1</value> 
	  <description>The length limit for downloaded content, in bytes.
	  If this value is nonnegative (>=0), content longer than it will be truncated;
	  otherwise, no truncation at all.
	  Caution: classical ftp RFCs never defines partial transfer and, in fact,
	  some ftp servers out there do not handle client side forced close-down very
	  well. Our implementation tries its best to handle such situations smoothly.
	  </description>
	</property>

	<property>
	  <name>ftp.timeout</name>
	  <value>300000</value>
	  <description>Default timeout for ftp client socket, in millisec.
	  Please also see ftp.keep.connection below.</description>
	</property>

	<property>
	  <name>ftp.server.timeout</name>
	  <value>300000</value>
	  <description>An estimation of ftp server idle time, in millisec.
	  Typically it is 120000 millisec for many ftp servers out there.
	  Better be conservative here. Together with ftp.timeout, it is used to
	  decide if we need to delete (annihilate) current ftp.client instance and
	  force to start another ftp.client instance anew. This is necessary because
	  a fetcher thread may not be able to obtain next request from queue in time
	  (due to idleness) before our ftp client times out or remote server
	  disconnects. Used only when ftp.keep.connection is true (please see below).
	  </description>
	</property>
	
	<!-- fetcher properties -->

	<property>
	  <name>fetcher.server.delay</name>
	  <value>5.0</value>
	  <description>The number of seconds the fetcher will delay between 
	   succesive requests to the same server.</description>
	</property>

	<property>
	  <name>fetcher.server.min.delay</name>
	  <value>5.0</value>
	  <description>The minimum number of seconds the fetcher will delay between 
	  successive requests to the same server. This value is applicable ONLY
	  if fetcher.threads.per.host is greater than 1 (i.e. the host blocking
	  is turned off).</description>
	</property>

	<property>
	 <name>fetcher.max.crawl.delay</name>
	 <value>30</value>
	 <description>
	 If the Crawl-Delay in robots.txt is set to greater than this value (in
	 seconds) then the fetcher will skip this page, generating an error report.
	 If set to -1 the fetcher will never skip such pages and will wait the
	 amount of time retrieved from robots.txt Crawl-Delay, however long that
	 might be.
	 </description>
	</property> 

	<property>
	  <name>fetcher.threads.fetch</name>
	  <value>50</value>
	  <description>The number of FetcherThreads the fetcher should use.
	  This is also determines the maximum number of requests that are
	  made at once (each FetcherThread handles one connection). The total
	  number of threads running in distributed mode will be the number of
	  fetcher threads * number of nodes as fetcher has one map task per node.
	  </description>
	</property>

	<property>
	  <name>fetcher.threads.per.queue</name>
	  <value>10</value>
	  <description>This number is the maximum number of threads that
		should be allowed to access a queue at one time. Replaces 
		deprecated parameter 'fetcher.threads.per.host'.
	   </description>
	</property>

	<property>
	  <name>fetcher.queue.mode</name>
	  <value>byHost</value>
	  <description>Determines how to put URLs into queues. Default value is 'byHost', 
	  also takes 'byDomain' or 'byIP'. Replaces the deprecated parameter 
	  'fetcher.threads.per.host.by.ip'.
	  </description>
	</property>

</configuration>
