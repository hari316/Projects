using System;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.IO;
using log4net;
using log4net.Config;
using System.ServiceProcess;
using System.Diagnostics;


namespace ICOMSProvisioningService
{
 public class ICOMSProvisioningService : ServiceBase
   {

    private static readonly ILog logger = LogManager.GetLogger(typeof(ICOMSProvisioningService));

    public ICOMSProvisioningService()
    {
        this.ServiceName = "ICOMS Provisioning Service";
    }

     public void LogEvent(string message, EventLogEntryType type, int eventId)
     {
         try
         {
             EventLog.WriteEntry(message, type, eventId);
         }
         catch (Exception ex)
         {             
             logger.Error(string.Format("Failed to write message to event log : message {0} : error {1}", message, ex.ToString()));
         }
     }        
        
    static void ListenForRequests(object tempObj)
    {

        logger.Info("ICOMSProvisioningService::ListenForRequests() called");

        string strIPAddress = string.Empty;            
        ServiceListenerMembers templistenerMembers;
        templistenerMembers = (ServiceListenerMembers)tempObj;
        ServiceRunTimeManager objServiceMgr;
        TcpListener tcpICOMServer = new TcpListener(IPAddress.Parse(templistenerMembers.listenerAddress), Convert.ToInt32(templistenerMembers.listenerPort));            
        // Start listening for client requests.

        try
        {
            tcpICOMServer.Start();
            strIPAddress = templistenerMembers.listenerAddress + ":" + templistenerMembers.listenerPort;
            int bytesRead;
            logger.Info(string.Format("The server listening at...  {0}", strIPAddress));            

            // Client connection loop
            while (true)
            {
                TcpClient tcpICOMClient;
                bool isClientClosed=false;
                try
                {                    
                    tcpICOMClient = tcpICOMServer.AcceptTcpClient();
                    logger.Info("************************** CONNECTON START ******************************************************************************************************");
                    logger.Info(string.Format("Connection estabilshed from {0}", strIPAddress));
                    NetworkStream clientStream = tcpICOMClient.GetStream(); 
                    
                    //persistent communication loop after client connected
                    while (true)
                    {
                        bytesRead = 0;
                        string strRec = string.Empty;
                        string strSend = string.Empty;     
                        byte[] message = new byte[4096];

                        try
                        {
                            //blocks until a client sends a message
                            bytesRead = clientStream.Read(message, 0, 4096);
                            if (bytesRead == 0)
                            {
                                logger.Debug("Message length received zero continue..");
                                //the client has disconnected from the server                                 
                                //break;
                                continue;
                            }
                            logger.Info("++++++++++++++++ MESSAGE PROCESS START +++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
                            logger.Info(string.Format("Message process started from...  {0}", strIPAddress));
                            TimeSpan startTS = System.DateTime.Now.TimeOfDay;
                            logger.Info(string.Format("ICOMS Message Process starts at...  {0}", startTS));
                            
                            logger.Info(string.Format("Convertion of byte data to string is in progress...  {0}", strIPAddress));

                            ASCIIEncoding encoder = new ASCIIEncoding();
                            strRec = encoder.GetString(message, 0, bytesRead);

                            logger.Info("Converted string data...");
                            logger.Info(string.Format("{0}", strRec));

                            // Calling Service Run Time Manager of ICOMS Provisioning service
                            objServiceMgr = new ServiceRunTimeManager();
                            strSend = objServiceMgr.processICOMSMessages(strRec, templistenerMembers);

                            ASCIIEncoding asen = new ASCIIEncoding();
                            byte[] buffer = encoder.GetBytes(strSend);
                            clientStream.Write(buffer, 0, buffer.Length);
                            clientStream.Flush();

                            TimeSpan endTS = System.DateTime.Now.TimeOfDay;
                            logger.Info(string.Format("Response Data to ICOMS...  {0}", strSend));
                            logger.Info(string.Format("ICOMS Message Process ends at...  {0}", endTS));
                            logger.Info(string.Format("Total Process Time...  {0}  [{1}  -  {2}].", endTS.Subtract(startTS), endTS, startTS));
                            logger.Info(string.Format("Message process completed from...  {0}", strIPAddress));
                            logger.Info("++++++++++++++++ MESSAGE PROCESS END +++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
                        }
                        catch (Exception ex)
                        {
                            logger.Warn("Client disconnected abruptly");
                            clientStream.Close();                     
                            tcpICOMClient.Close();
                            isClientClosed = true;                         
                            logger.Error(string.Format("ListenForRequests(): Exception: {0}", ex.Message.ToString()));
                            logger.Error("ICOMSProvisioningService::ListenForRequests() failing while reading data from client");
                            break;
                        }
                    }
                    /* clean up */
                    if (!isClientClosed)
                    {
                        clientStream.Close();
                        tcpICOMClient.Close();
                    }
                    logger.Info(string.Format("Connection closed from {0}", strIPAddress));
                    logger.Info("Server going for Accept Client Mode (waiting for client connection). So client need to make fresh connection in order to communicate with server");
                    logger.Info(string.Format("Server waiting for client connection...  {0}", strIPAddress));
                    logger.Info("**************************CONNECTON END ******************************************************************************************************");
                }
                catch (Exception ex)
                {
                    logger.Error(string.Format("ListenForRequests(): Exception: {0}", ex.Message.ToString()));
                    logger.Error("ICOMSProvisioningService::ListenForRequests() failing while reading data from client");
                }
               
            }

        }
        catch (Exception ex)
        {
            logger.Error(string.Format("ListenForRequests(): Exception: {0}", ex.Message.ToString()));
            logger.Error("ICOMSProvisioningService::ListenForRequests() failing while start listening the server");              
        }
    }

    
    static void Main()
    {

        // Comment the below line while running application as console application        
        
        ServiceBase.Run(new ICOMSProvisioningService());
        
        // Place main code here to run application as console application           

        
        // Place main code here to run application as console application          
    } 
     
      
    protected override void OnStart(string[] args)
    {
        base.OnStart(args);
        logger.Info("/********************* ICOMS Provisioning Service *********************/");

        try
        {

            //  ---  Main code ------

            log4net.Config.XmlConfigurator.Configure();
            logger.Info("ICOMSProvisioningService::Main() called");

            ServiceListenerMembers[] arrGetListnerList;
            ServiceConfigurationManager cnfMgr = new ServiceConfigurationManager();

            // Load service Config file
            if (!cnfMgr.LoadServiceConfigFile())
            {
                return;
            }

            // Load Site details from service config file
            if (!cnfMgr.getAllListernsList())
            {
                return;
            }
            arrGetListnerList = ServiceConfigurationManager._CRMSiteDetails;


            // Load Site details from service config file
            if (!cnfMgr.LoadCRMConnectionDetails())
            {
                return;
            }

            // Set Primary CRM when service starting
            CRM4cInterfaceAvailabilityManager.ActiveCRMURL = "P";

            // Check If Backup CRM is exist or Not
            CRM4cInterfaceAvailabilityManager.IsBackupCRMExist = CRM4cInterfaceAvailabilityManager.checkBackupCRMExistence();

            foreach (ServiceListenerMembers obj in arrGetListnerList)
            {
                Thread listener = new Thread(new ParameterizedThreadStart(ListenForRequests));
                listener.IsBackground = true;
                listener.Start(obj);
            }

            // Console.WriteLine("ICOMS Provisioning Service Running from DEV. Enviornment");
            // Console.ReadLine();             

            //  ---  Main code ------                

            // log service started event
            LogEvent("Service started successfully.", EventLogEntryType.Information, 1000);
        }
        catch (Exception ex)
        {
            string err = string.Format("Service failed to start : error {0}", ex.ToString());               
            logger.Error(err);
            LogEvent(err, EventLogEntryType.Error, 1001);
        }
        //TODO: place your start code here
    }

    protected override void OnStop()
    {
        base.OnStop();
           
        //TODO: clean up any variables and stop any threads
        LogEvent("Service stopped successfully.", EventLogEntryType.Information, 1002);
    }


    }
}
